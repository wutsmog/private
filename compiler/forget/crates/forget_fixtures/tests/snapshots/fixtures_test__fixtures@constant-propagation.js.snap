---
source: crates/forget_fixtures/tests/fixtures_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/forget_fixtures/tests/fixtures/constant-propagation.js
---
Input:
function Component(props) {
  // global propagation
  let a;
  a = Math;
  a; // Math

  // primitive propagation w phi
  let b;
  if (props) {
    b = true;
  } else {
    b = true;
  }
  b; // true

  // primitive propagation fails if different values
  let c;
  if (props) {
    c = true;
  } else {
    c = 42;
  }
  c; // <no change>

  // constant evaluation
  42 + 1; // 43
  42 - 1; // 41
  42 * 2; // 84
  42 / 2; // 21
  0 == 1; // false
  0 != 1; // true
  0 === 1; // false
  0 !== 1; // true
  0 == 0; // true
  // TODO: unary operators
  //   0 == -0; // false
  //   0 != -0; // true
  //   0 === -0; // false
  //   0 !== -0; // true
  NaN == NaN; // false
  NaN != NaN; // true
  NaN !== NaN; // true
  NaN !== NaN; // true
  "hello" == "hello"; // true
  "hello" != "hello"; // false
  "hello" === "hello"; // true
  "hello" !== "hello"; // false
  "hello" == "world"; // false
  "hello" != "world"; // true
  "hello" === "world"; // false
  "hello" !== "world"; // true
  true == true; // true
  true != true; // false
  true === true; // true
  true !== true; // false

  // constant evaluation through variable
  let x = 5 * 60 * 60 * 1000; // 5 hours in milliseconds
  x;
}


Output:
function Component(
  unknown props$108,
)
entry bb0
bb0 (block)
  [0] unknown $2 = DeclareLocal Let unknown a$109
  [1] unknown $3 = LoadGlobal Math
  [2] unknown $4 = StoreLocal Reassign unknown a$110 = unknown $3
  [3] unknown $5 = LoadGlobal Math
  [4] unknown $7 = DeclareLocal Let unknown b$111
  [5] unknown $12 = LoadLocal unknown props$108
  [6] If unknown $12 consequent=bb2 alternate=bb3 fallthrough=bb1
bb2 (block)
  predecessors: bb0
  [7] unknown $8 = true
  [8] unknown $9 = StoreLocal Reassign unknown b$112 = unknown $8
  [9] Goto bb1
bb3 (block)
  predecessors: bb0
  [10] unknown $10 = true
  [11] unknown $11 = StoreLocal Reassign unknown b$113 = unknown $10
  [12] Goto bb1
bb1 (block)
  predecessors: bb2, bb3
  b$114: phi(bb2: b$112, bb3: b$113)
  [13] unknown $13 = true
  [14] unknown $15 = DeclareLocal Let unknown c$115
  [15] unknown $20 = LoadLocal unknown props$108
  [16] If unknown $20 consequent=bb5 alternate=bb6 fallthrough=bb4
bb5 (block)
  predecessors: bb1
  [17] unknown $16 = true
  [18] unknown $17 = StoreLocal Reassign unknown c$117 = unknown $16
  [19] Goto bb4
bb6 (block)
  predecessors: bb1
  [20] unknown $18 = 42
  [21] unknown $19 = StoreLocal Reassign unknown c$118 = unknown $18
  [22] Goto bb4
bb4 (block)
  predecessors: bb5, bb6
  c$119: phi(bb5: c$117, bb6: c$118)
  [23] unknown $21 = LoadLocal unknown c$119
  [24] unknown $22 = 42
  [25] unknown $23 = 1
  [26] unknown $24 = 43
  [27] unknown $25 = 42
  [28] unknown $26 = 1
  [29] unknown $27 = 41
  [30] unknown $28 = 42
  [31] unknown $29 = 2
  [32] unknown $30 = 84
  [33] unknown $31 = 42
  [34] unknown $32 = 2
  [35] unknown $33 = 21
  [36] unknown $34 = 0
  [37] unknown $35 = 1
  [38] unknown $36 = false
  [39] unknown $37 = 0
  [40] unknown $38 = 1
  [41] unknown $39 = true
  [42] unknown $40 = 0
  [43] unknown $41 = 1
  [44] unknown $42 = false
  [45] unknown $43 = 0
  [46] unknown $44 = 1
  [47] unknown $45 = true
  [48] unknown $46 = 0
  [49] unknown $47 = 0
  [50] unknown $48 = true
  [51] unknown $49 = LoadGlobal NaN
  [52] unknown $50 = LoadGlobal NaN
  [53] unknown $51 = Binary unknown $49 == unknown $50
  [54] unknown $52 = LoadGlobal NaN
  [55] unknown $53 = LoadGlobal NaN
  [56] unknown $54 = Binary unknown $52 != unknown $53
  [57] unknown $55 = LoadGlobal NaN
  [58] unknown $56 = LoadGlobal NaN
  [59] unknown $57 = Binary unknown $55 !== unknown $56
  [60] unknown $58 = LoadGlobal NaN
  [61] unknown $59 = LoadGlobal NaN
  [62] unknown $60 = Binary unknown $58 !== unknown $59
  [63] unknown $61 = "hello"
  [64] unknown $62 = "hello"
  [65] unknown $63 = true
  [66] unknown $64 = "hello"
  [67] unknown $65 = "hello"
  [68] unknown $66 = false
  [69] unknown $67 = "hello"
  [70] unknown $68 = "hello"
  [71] unknown $69 = true
  [72] unknown $70 = "hello"
  [73] unknown $71 = "hello"
  [74] unknown $72 = false
  [75] unknown $73 = "hello"
  [76] unknown $74 = "world"
  [77] unknown $75 = false
  [78] unknown $76 = "hello"
  [79] unknown $77 = "world"
  [80] unknown $78 = true
  [81] unknown $79 = "hello"
  [82] unknown $80 = "world"
  [83] unknown $81 = false
  [84] unknown $82 = "hello"
  [85] unknown $83 = "world"
  [86] unknown $84 = true
  [87] unknown $85 = true
  [88] unknown $86 = true
  [89] unknown $87 = true
  [90] unknown $88 = true
  [91] unknown $89 = true
  [92] unknown $90 = false
  [93] unknown $91 = true
  [94] unknown $92 = true
  [95] unknown $93 = true
  [96] unknown $94 = true
  [97] unknown $95 = true
  [98] unknown $96 = false
  [99] unknown $97 = 5
  [100] unknown $98 = 60
  [101] unknown $99 = 300
  [102] unknown $100 = 60
  [103] unknown $101 = 18000
  [104] unknown $102 = 1000
  [105] unknown $103 = 18000000
  [106] unknown $105 = StoreLocal Let unknown x$120 = unknown $103
  [107] unknown $106 = 18000000
  [108] unknown $107 = <undefined>
  [109] Return unknown $107
