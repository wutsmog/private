{
    "objects": {
        "SourceLocation": {
            "fields": {
                "source": {
                    "type": "Option<String>"
                },
                "start": {
                    "type": "Position"
                },
                "end": {
                    "type": "Position"
                }
            }
        },
        "Position": {
            "fields": {
                "line": {
                    "type": "NonZeroU32"
                },
                "column": {
                    "type": "u32"
                }
            }
        },
        "Function": {
            "fields": {
                "id": {
                    "type": "Option<Identifier>"
                },
                "params": {
                    "type": "Vec<Pattern>"
                },
                "body": {
                    "type": "Option<FunctionBody>"
                },
                "is_generator": {
                    "type": "bool",
                    "optional": true,
                    "rename": "generator"
                },
                "is_async": {
                    "type": "bool",
                    "optional": true,
                    "rename": "async"
                }
            }
        },
        "RegExpValue": {
            "fields": {
                "pattern": {
                    "type": "String"
                },
                "flags": {
                    "type": "String"
                }
            }
        }
    },
    "nodes": {
        "Identifier": {
            "fields": {
                "name": {
                    "type": "String"
                },
                "binding": {
                    "type": "Option<Binding>",
                    "optional": true,
                    "skip": true
                }
            }
        },
        "Literal": {
            "fields": {
                "value": {
                    "type": "JsValue"
                },
                "raw": {
                    "type": "Option<String>",
                    "optional": true
                },
                "regex": {
                    "type": "Option<RegExpValue>",
                    "optional": true
                }
            }
        },
        "Program": {
            "fields": {
                "body": {
                    "type": "Vec<ModuleItem>"
                },
                "source_type": {
                    "type": "SourceType",
                    "optional": true,
                    "rename": "sourceType"
                }
            }
        },
        "ExpressionStatement": {
            "fields": {
                "expression": {
                    "type": "Expression"
                },
                "directive": {
                    "type": "Option<String>",
                    "optional": true
                }
            }
        },
        "BlockStatement": {
            "fields": {
                "body": {
                    "type": "Vec<Statement>"
                }
            }
        },
        "EmptyStatement": {},
        "DebuggerStatement": {},
        "WithStatement": {
            "fields": {
                "object": {
                    "type": "Expression"
                },
                "body": {
                    "type": "Statement"
                }
            }
        },
        "ReturnStatement": {
            "fields": {
                "argument": {
                    "type": "Option<Expression>"
                }
            }
        },
        "LabeledStatement": {
            "fields": {
                "label": {
                    "type": "Identifier"
                },
                "body": {
                    "type": "Statement"
                }
            }
        },
        "BreakStatement": {
            "fields": {
                "label": {
                    "type": "Option<Identifier>"
                }
            }
        },
        "ContinueStatement": {
            "fields": {
                "label": {
                    "type": "Option<Identifier>"
                }
            }
        },
        "IfStatement": {
            "fields": {
                "test": {
                    "type": "Expression"
                },
                "consequent": {
                    "type": "Statement"
                },
                "alternate": {
                    "type": "Option<Statement>"
                }
            }
        },
        "SwitchStatement": {
            "fields": {
                "discriminant": {
                    "type": "Expression"
                },
                "cases": {
                    "type": "Vec<SwitchCase>"
                }
            }
        },
        "SwitchCase": {
            "fields": {
                "test": {
                    "type": "Option<Expression>"
                },
                "consequent": {
                    "type": "Vec<Statement>"
                }
            }
        },
        "ThrowStatement": {
            "fields": {
                "argument": {
                    "type": "Expression"
                }
            }
        },
        "TryStatement": {
            "fields": {
                "block": {
                    "type": "BlockStatement"
                },
                "handler": {
                    "type": "Option<CatchClause>"
                },
                "finalizer": {
                    "type": "Option<BlockStatement>"
                }
            }
        },
        "CatchClause": {
            "fields": {
                "param": {
                    "type": "Pattern"
                },
                "body": {
                    "type": "BlockStatement"
                }
            }
        },
        "WhileStatement": {
            "fields": {
                "test": {
                    "type": "Expression"
                },
                "body": {
                    "type": "Statement"
                }
            }
        },
        "DoWhileStatement": {
            "fields": {
                "body": {
                    "type": "Statement"
                },
                "test": {
                    "type": "Expression"
                }
            }
        },
        "ForStatement": {
            "fields": {
                "init": {
                    "type": "Option<ForInit>"
                },
                "test": {
                    "type": "Option<Expression>"
                },
                "update": {
                    "type": "Option<Expression>"
                },
                "body": {
                    "type": "Statement"
                }
            }
        },
        "ForInStatement": {
            "fields": {
                "left": {
                    "type": "ForInInit"
                },
                "right": {
                    "type": "Expression"
                },
                "body": {
                    "type": "Statement"
                }
            }
        },
        "ForOfStatement": {
            "fields": {
                "left": {
                    "type": "ForInInit"
                },
                "right": {
                    "type": "Expression"
                },
                "body": {
                    "type": "Statement"
                }
            }
        },
        "FunctionDeclaration": {
            "fields": {
                "function": {
                    "type": "Function",
                    "flatten": true
                }
            }
        },
        "VariableDeclaration": {
            "fields": {
                "kind": {
                    "type": "VariableDeclarationKind"
                },
                "declarations": {
                    "type": "Vec<VariableDeclarator>"
                }
            }
        },
        "VariableDeclarator": {
            "fields": {
                "id": {
                    "type": "Pattern"
                },
                "init": {
                    "type": "Option<Expression>"
                }
            }
        },
        "ThisExpression": {},
        "ArrayExpression": {
            "fields": {
                "elements": {
                    "type": "Vec<Option<ExpressionOrSpread>>"
                }
            }
        },
        "ObjectExpression": {
            "fields": {
                "properties": {
                    "type": "Vec<Property>"
                }
            }
        },
        "Property": {
            "fields": {
                "key": {
                    "type": "PropertyKey"
                },
                "value": {
                    "type": "Expression"
                },
                "kind": {
                    "type": "PropertyKind"
                }
            }
        },
        "FunctionExpression": {
            "fields": {
                "function": {
                    "type": "Function",
                    "flatten": true
                }
            }
        },
        "ArrowFunctionExpression": {
            "fields": {
                "function": {
                    "type": "Function",
                    "flatten": true
                },
                "is_expression": {
                    "type": "bool",
                    "rename": "expression"
                }
            }
        },
        "UnaryExpression": {
            "fields": {
                "operator": {
                    "type": "UnaryOperator"
                },
                "prefix": {
                    "type": "bool"
                },
                "argument": {
                    "type": "Expression"
                }
            }
        },
        "UpdateExpression": {
            "fields": {
                "operator": {
                    "type": "UpdateOperator"
                },
                "argument": {
                    "type": "Expression"
                },
                "prefix": {
                    "type": "bool"
                }
            }
        },
        "BinaryExpression": {
            "fields": {
                "left": {
                    "type": "Expression"
                },
                "operator": {
                    "type": "BinaryOperator"
                },
                "right": {
                    "type": "Expression"
                }
            }
        },
        "AssignmentExpression": {
            "fields": {
                "operator": {
                    "type": "AssignmentOperator"
                },
                "left": {
                    "type": "AssignmentTarget"
                },
                "right": {
                    "type": "Expression"
                }
            }
        },
        "LogicalExpression": {
            "fields": {
                "operator": {
                    "type": "LogicalOperator"
                },
                "left": {
                    "type": "Expression"
                },
                "right": {
                    "type": "Expression"
                }
            }
        },
        "MemberExpression": {
            "fields": {
                "object": {
                    "type": "ExpressionOrSuper"
                },
                "property": {
                    "type": "Expression"
                },
                "computed": {
                    "type": "bool"
                }
            }
        },
        "ConditionalExpression": {
            "fields": {
                "test": {
                    "type": "Expression"
                },
                "alternate": {
                    "type": "Expression"
                },
                "consequent": {
                    "type": "Expression"
                }
            }
        },
        "CallExpression": {
            "fields": {
                "callee": {
                    "type": "ExpressionOrSuper"
                },
                "arguments": {
                    "type": "Vec<ExpressionOrSpread>"
                }
            }
        },
        "NewExpression": {
            "fields": {
                "callee": {
                    "type": "Expression"
                },
                "arguments": {
                    "type": "Vec<ExpressionOrSpread>"
                }
            }
        },
        "SequenceExpression": {
            "fields": {
                "expressions": {
                    "type": "Vec<Expression>"
                }
            }
        },
        "Super": {},
        "SpreadElement": {
            "fields": {
                "argument": {
                    "type": "Expression"
                }
            }
        },
        "YieldExpression": {
            "fields": {
                "argument": {
                    "type": "Option<Expression>",
                    "optional": true
                },
                "is_delegate": {
                    "type": "bool",
                    "rename": "delegate"
                }
            }
        },
        "ImportDeclaration": {
            "fields": {
                "specifiers": {
                    "type": "Vec<ImportDeclarationSpecifier>"
                },
                "source": {
                    "type": "Literal"
                }
            }
        },
        "ImportSpecifier": {
            "fields": {
                "imported": {
                    "type": "Identifier"
                },
                "local": {
                    "type": "Identifier"
                }
            }
        },
        "ImportDefaultSpecifier": {
            "fields": {
                "local": {
                    "type": "Identifier"
                }
            }
        },
        "ImportNamespaceSpecifier": {
            "fields": {
                "local": {
                    "type": "Identifier"
                }
            }
        },
        "JSXIdentifier": {
            "fields": {
                "name": {
                    "type": "String"
                }
            }
        },
        "JSXNamespacedName": {
            "fields": {
                "namespace": {
                    "type": "JSXIdentifier"
                },
                "name": {
                    "type": "JSXIdentifier"
                }
            }
        },
        "JSXMemberExpression": {
            "fields": {
                "object": {
                    "type": "JSXMemberExpressionOrIdentifier"
                },
                "property": {
                    "type": "JSXIdentifier"
                }
            }
        },
        "JSXEmptyExpression": {},
        "JSXExpressionContainer": {
            "fields": {
                "expression": {
                    "type": "JSXExpressionOrEmpty"
                }
            }
        },
        "JSXSpreadChild": {
            "fields": {
                "expression": {
                    "type": "Expression"
                }
            }
        },
        "JSXOpeningElement": {
            "fields": {
                "name": {
                    "type": "JSXElementName"
                },
                "attributes": {
                    "type": "Vec<JSXAttributeOrSpread>"
                },
                "self_closing": {
                    "type": "bool",
                    "rename": "selfClosing"
                }
            }
        },
        "JSXClosingElement": {
            "fields": {
                "name": {
                    "type": "JSXElementName"
                }
            }
        },
        "JSXAttribute": {
            "fields": {
                "name": {
                    "type": "JSXIdentifierOrNamespacedName"
                },
                "value": {
                    "type": "Option<JSXAttributeValue>"
                }
            }
        },
        "JSXSpreadAttribute": {
            "fields": {
                "argument": {
                    "type": "Expression"
                }
            }
        },
        "JSXText": {
            "fields": {
                "value": {
                    "type": "String"
                },
                "raw": {
                    "type": "String"
                }
            }
        },
        "JSXElement": {
            "fields": {
                "opening_element": {
                    "type": "JSXOpeningElement",
                    "rename": "openingElement"
                },
                "children": {
                    "type": "Vec<JSXChildItem>"
                },
                "closing_element": {
                    "type": "Option<JSXClosingElement>",
                    "rename": "closingElement"
                }
            }
        },
        "JSXFragment": {
            "fields": {
                "opening_fragment": {
                    "type": "JSXOpeningFragment",
                    "rename": "openingFragment"
                },
                "children": {
                    "type": "Vec<JSXChildItem>"
                },
                "closing_fragment": {
                    "type": "Option<JSXClosingFragment>",
                    "rename": "closingFragment"
                }
            }
        },
        "JSXOpeningFragment": {},
        "JSXClosingFragment": {}
    },
    "enums": {
        "Statement": [
            "BlockStatement",
            "BreakStatement",
            "ContinueStatement",
            "DebuggerStatement",
            "DoWhileStatement",
            "EmptyStatement",
            "ExpressionStatement",
            "ForInStatement",
            "ForOfStatement",
            "ForStatement",
            "FunctionDeclaration",
            "IfStatement",
            "LabeledStatement",
            "ReturnStatement",
            "SwitchStatement",
            "ThrowStatement",
            "TryStatement",
            "VariableDeclaration",
            "WhileStatement",
            "WithStatement"
        ],
        "Expression": [
            "ArrayExpression",
            "ArrowFunctionExpression",
            "AssignmentExpression",
            "BinaryExpression",
            "CallExpression",
            "ConditionalExpression",
            "FunctionExpression",
            "Identifier",
            "Literal",
            "LogicalExpression",
            "MemberExpression",
            "NewExpression",
            "ObjectExpression",
            "SequenceExpression",
            "ThisExpression",
            "UnaryExpression",
            "UpdateExpression",
            "YieldExpression",
            "JSXElement"
        ],
        "ImportDeclarationSpecifier": [
            "ImportSpecifier",
            "ImportDefaultSpecifier",
            "ImportNamespaceSpecifier"
        ],
        "ModuleItem": [
            "ImportOrExportDeclaration",
            "Statement"
        ],
        "ImportOrExportDeclaration": [
            "ImportDeclaration"
        ],
        "ExpressionOrSuper": [
            "Expression",
            "Super"
        ],
        "ExpressionOrSpread": [
            "Expression",
            "SpreadElement"
        ],
        "FunctionBody": [
            "BlockStatement",
            "Expression"
        ],
        "Pattern": [
            "Identifier"
        ],
        "ForInit": [
            "Expression",
            "VariableDeclaration"
        ],
        "ForInInit": [
            "Pattern",
            "VariableDeclaration"
        ],
        "PropertyKey": [
            "Identifier",
            "Literal"
        ],
        "AssignmentTarget": [
            "Expression",
            "Pattern"
        ],
        "JSXMemberExpressionOrIdentifier": [
            "JSXMemberExpression",
            "JSXIdentifier"
        ],
        "JSXExpressionOrEmpty": [
            "Expression",
            "JSXEmptyExpression"
        ],
        "JSXAttributeOrSpread": [
            "JSXAttribute",
            "JSXSpreadAttribute"
        ],
        "JSXAttributeValue": [
            "Literal",
            "JSXExpressionContainer",
            "JSXElement",
            "JSXFragment"
        ],
        "JSXElementName": [
            "JSXIdentifier",
            "JSXMemberExpression",
            "JSXNamespacedName"
        ],
        "JSXIdentifierOrNamespacedName": [
            "JSXIdentifier",
            "JSXNamespacedName"
        ],
        "JSXChildItem": [
            "JSXText", 
            "JSXExpressionContainer",
            "JSXSpreadChild",
            "JSXElement",
            "JSXFragment"
        ]
    },
    "operators": {
        "VariableDeclarationKind": {
            "Const": "const",
            "Let": "let",
            "Var": "var"
        },
        "PropertyKind": {
            "Get": "get",
            "Init": "init",
            "Set": "set"
        },
        "UnaryOperator": {
            "Delete": "delete",
            "Minus": "-",
            "Negation": "!",
            "Plus": "+",
            "Tilde": "~",
            "Typeof": "typeof",
            "Void": "void"
        },
        "UpdateOperator": {
            "Decrement": "--",
            "Increment": "++"
        },
        "BinaryOperator": {
            "Add": "+",
            "BinaryAnd": "&",
            "BinaryOr": "|",
            "BinaryXor": "^",
            "Divide": "/",
            "Equals": "==",
            "GreaterThan": ">",
            "GreaterThanOrEqual": ">=",
            "In": "in",
            "Instanceof": "instanceof",
            "LessThan": "<",
            "LessThanOrEqual": "<=",
            "Modulo": "%",
            "Multiply": "*",
            "NotEquals": "!=",
            "NotStrictEquals": "!==",
            "ShiftLeft": "<<",
            "ShiftRight": ">>",
            "StrictEquals": "===",
            "Subtract": "-",
            "UnsignedShiftRight": ">>>"
        },
        "AssignmentOperator": {
            "BinaryAndEquals": "&=",
            "BinaryOrEquals": "|=",
            "BinaryXorEquals": "^=",
            "DivideEquals": "/=",
            "Equals": "=",
            "MinusEquals": "-=",
            "ModuloEquals": "%=",
            "MultiplyEquals": "*=",
            "PlusEquals": "+=",
            "ShiftLeftEquals": "<<=",
            "ShiftRightEquals": ">>=",
            "UnsignedShiftRightEquals": ">>>="
        },
        "LogicalOperator": {
            "And": "&&",
            "NullCoalescing": "??",
            "Or": "||"
        },
        "SourceType": {
            "Script": "script",
            "Module": "module"
        }
    }
}