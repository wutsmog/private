---
source: crates/forget_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/forget_hermes_parser/tests/fixtures/assignment-variations.js
---
Input:
function f() {
  let x = 1;
  x = x + 1;
  x += 1;
  x >>>= 1;
  return x;
}


Output:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "f",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 9,
          "end": 10
        }
      },
      "params": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 21,
                    "end": 22
                  }
                },
                "init": {
                  "type": "NumericLiteral",
                  "value": 1.0,
                  "loc": null,
                  "range": {
                    "start": 25,
                    "end": 26
                  }
                },
                "loc": null,
                "range": {
                  "start": 21,
                  "end": 26
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 17,
              "end": 27
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "x",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 30,
                  "end": 31
                }
              },
              "right": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 34,
                    "end": 35
                  }
                },
                "operator": "+",
                "right": {
                  "type": "NumericLiteral",
                  "value": 1.0,
                  "loc": null,
                  "range": {
                    "start": 38,
                    "end": 39
                  }
                },
                "loc": null,
                "range": {
                  "start": 34,
                  "end": 39
                }
              },
              "loc": null,
              "range": {
                "start": 30,
                "end": 39
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 30,
              "end": 40
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "+=",
              "left": {
                "type": "Identifier",
                "name": "x",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 43,
                  "end": 44
                }
              },
              "right": {
                "type": "NumericLiteral",
                "value": 1.0,
                "loc": null,
                "range": {
                  "start": 48,
                  "end": 49
                }
              },
              "loc": null,
              "range": {
                "start": 43,
                "end": 49
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 43,
              "end": 50
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": ">>>=",
              "left": {
                "type": "Identifier",
                "name": "x",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 53,
                  "end": 54
                }
              },
              "right": {
                "type": "NumericLiteral",
                "value": 1.0,
                "loc": null,
                "range": {
                  "start": 60,
                  "end": 61
                }
              },
              "loc": null,
              "range": {
                "start": 53,
                "end": 61
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 53,
              "end": 62
            }
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "Identifier",
              "name": "x",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 72,
                "end": 73
              }
            },
            "loc": null,
            "range": {
              "start": 65,
              "end": 74
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 13,
          "end": 76
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 0,
        "end": 76
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 76
      }
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": {
    "start": 0,
    "end": 76
  }
}
