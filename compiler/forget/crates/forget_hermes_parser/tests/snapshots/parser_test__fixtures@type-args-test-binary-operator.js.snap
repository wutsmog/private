---
source: crates/forget_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/forget_hermes_parser/tests/fixtures/type-args-test-binary-operator.js
---
Input:
function component(a, b) {
  if (a > b) {
    let m = {};
  }
}


Output:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "component",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 9,
          "end": 18
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "a",
          "typeAnnotation": null,
          "loc": null,
          "range": {
            "start": 19,
            "end": 20
          }
        },
        {
          "type": "Identifier",
          "name": "b",
          "typeAnnotation": null,
          "loc": null,
          "range": {
            "start": 22,
            "end": 23
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "left": {
                "type": "Identifier",
                "name": "a",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 33,
                  "end": 34
                }
              },
              "operator": ">",
              "right": {
                "type": "Identifier",
                "name": "b",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 37,
                  "end": 38
                }
              },
              "loc": null,
              "range": {
                "start": 33,
                "end": 38
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "kind": "let",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "m",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 50,
                          "end": 51
                        }
                      },
                      "init": {
                        "type": "ObjectExpression",
                        "properties": [],
                        "loc": null,
                        "range": {
                          "start": 54,
                          "end": 56
                        }
                      },
                      "loc": null,
                      "range": {
                        "start": 50,
                        "end": 56
                      }
                    }
                  ],
                  "loc": null,
                  "range": {
                    "start": 46,
                    "end": 57
                  }
                }
              ],
              "loc": null,
              "range": {
                "start": 40,
                "end": 61
              }
            },
            "alternate": null,
            "loc": null,
            "range": {
              "start": 29,
              "end": 61
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 25,
          "end": 63
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 0,
        "end": 63
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 63
      }
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": {
    "start": 0,
    "end": 63
  }
}
