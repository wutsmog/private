---
source: crates/forget_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/forget_hermes_parser/tests/fixtures/error.codegen-error-on-conflicting-imports.js
---
Input:
// @enableEmitFreeze @instrumentForget

let makeReadOnly = "conflicting identifier";
function useFoo(props) {
  return foo(props.x);
}


Output:
{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "let",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "makeReadOnly",
            "typeAnnotation": null,
            "loc": null,
            "range": {
              "start": 44,
              "end": 56
            }
          },
          "init": {
            "type": "StringLiteral",
            "value": "conflicting identifier",
            "loc": null,
            "range": {
              "start": 59,
              "end": 83
            }
          },
          "loc": null,
          "range": {
            "start": 44,
            "end": 83
          }
        }
      ],
      "loc": null,
      "range": {
        "start": 40,
        "end": 84
      }
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "useFoo",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 94,
          "end": 100
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "props",
          "typeAnnotation": null,
          "loc": null,
          "range": {
            "start": 101,
            "end": 106
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "foo",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 119,
                  "end": 122
                }
              },
              "arguments": [
                {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "props",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 123,
                      "end": 128
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "x",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 129,
                      "end": 130
                    }
                  },
                  "computed": false,
                  "loc": null,
                  "range": {
                    "start": 123,
                    "end": 130
                  }
                }
              ],
              "loc": null,
              "range": {
                "start": 119,
                "end": 131
              }
            },
            "loc": null,
            "range": {
              "start": 112,
              "end": 132
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 108,
          "end": 134
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 85,
        "end": 134
      },
      "loc": null,
      "range": {
        "start": 85,
        "end": 134
      }
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": {
    "start": 40,
    "end": 134
  }
}
