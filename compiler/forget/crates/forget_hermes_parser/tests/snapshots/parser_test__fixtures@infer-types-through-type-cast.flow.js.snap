---
source: crates/forget_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/forget_hermes_parser/tests/fixtures/infer-types-through-type-cast.flow.js
---
Input:
// @flow
function Component(props) {
  // We can infer that `x` is a primitive bc it is aliased to `y`,
  // which is used in a binary expression
  const x = foo();
  const y = (x: any);
  y + 1;
  return x;
}

Output:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Component",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 18,
          "end": 27
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "props",
          "typeAnnotation": null,
          "loc": null,
          "range": {
            "start": 28,
            "end": 33
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "const",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 154,
                    "end": 155
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "foo",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 158,
                      "end": 161
                    }
                  },
                  "arguments": [],
                  "loc": null,
                  "range": {
                    "start": 158,
                    "end": 163
                  }
                },
                "loc": null,
                "range": {
                  "start": 154,
                  "end": 163
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 148,
              "end": 164
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "const",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 173,
                    "end": 174
                  }
                },
                "init": {
                  "type": "CoverTypedIdentifier",
                  "left": {
                    "type": "Identifier",
                    "name": "x",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 178,
                      "end": 179
                    }
                  },
                  "right": {
                    "type": "TSTypeAnnotation",
                    "loc": null,
                    "range": {
                      "start": 179,
                      "end": 184
                    }
                  },
                  "loc": null,
                  "range": {
                    "start": 178,
                    "end": 184
                  }
                },
                "loc": null,
                "range": {
                  "start": 173,
                  "end": 185
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 167,
              "end": 186
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "BinaryExpression",
              "left": {
                "type": "Identifier",
                "name": "y",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 189,
                  "end": 190
                }
              },
              "operator": "+",
              "right": {
                "type": "NumericLiteral",
                "value": 1.0,
                "loc": null,
                "range": {
                  "start": 193,
                  "end": 194
                }
              },
              "loc": null,
              "range": {
                "start": 189,
                "end": 194
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 189,
              "end": 195
            }
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "Identifier",
              "name": "x",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 205,
                "end": 206
              }
            },
            "loc": null,
            "range": {
              "start": 198,
              "end": 207
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 35,
          "end": 209
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 9,
        "end": 209
      },
      "loc": null,
      "range": {
        "start": 9,
        "end": 209
      }
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": {
    "start": 9,
    "end": 209
  }
}
