---
source: crates/forget_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/forget_hermes_parser/tests/fixtures/type-test-return-type-inference.js
---
Input:
function component() {
  let x = foo();
  let y = foo();
  if (x > y) {
    let z = {};
  }

  let z = foo();
  return z;
}


Output:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "component",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 9,
          "end": 18
        }
      },
      "params": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 29,
                    "end": 30
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "foo",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 33,
                      "end": 36
                    }
                  },
                  "arguments": [],
                  "loc": null,
                  "range": {
                    "start": 33,
                    "end": 38
                  }
                },
                "loc": null,
                "range": {
                  "start": 29,
                  "end": 38
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 25,
              "end": 39
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 46,
                    "end": 47
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "foo",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 50,
                      "end": 53
                    }
                  },
                  "arguments": [],
                  "loc": null,
                  "range": {
                    "start": 50,
                    "end": 55
                  }
                },
                "loc": null,
                "range": {
                  "start": 46,
                  "end": 55
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 42,
              "end": 56
            }
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "left": {
                "type": "Identifier",
                "name": "x",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 63,
                  "end": 64
                }
              },
              "operator": ">",
              "right": {
                "type": "Identifier",
                "name": "y",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 67,
                  "end": 68
                }
              },
              "loc": null,
              "range": {
                "start": 63,
                "end": 68
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "kind": "let",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "z",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 80,
                          "end": 81
                        }
                      },
                      "init": {
                        "type": "ObjectExpression",
                        "properties": [],
                        "loc": null,
                        "range": {
                          "start": 84,
                          "end": 86
                        }
                      },
                      "loc": null,
                      "range": {
                        "start": 80,
                        "end": 86
                      }
                    }
                  ],
                  "loc": null,
                  "range": {
                    "start": 76,
                    "end": 87
                  }
                }
              ],
              "loc": null,
              "range": {
                "start": 70,
                "end": 91
              }
            },
            "alternate": null,
            "loc": null,
            "range": {
              "start": 59,
              "end": 91
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "z",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 99,
                    "end": 100
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "foo",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 103,
                      "end": 106
                    }
                  },
                  "arguments": [],
                  "loc": null,
                  "range": {
                    "start": 103,
                    "end": 108
                  }
                },
                "loc": null,
                "range": {
                  "start": 99,
                  "end": 108
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 95,
              "end": 109
            }
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "Identifier",
              "name": "z",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 119,
                "end": 120
              }
            },
            "loc": null,
            "range": {
              "start": 112,
              "end": 121
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 21,
          "end": 123
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 0,
        "end": 123
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 123
      }
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": {
    "start": 0,
    "end": 123
  }
}
