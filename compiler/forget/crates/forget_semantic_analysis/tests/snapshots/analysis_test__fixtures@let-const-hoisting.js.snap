---
source: crates/forget_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/forget_semantic_analysis/tests/fixtures/let-const-hoisting.js
---
Input:
function Component() {
  function foo() {
    a;
    b;
  }
  let a;
  const b = true;
}


Analysis:
Scope {
    id: ScopeId(
        0,
    ),
    kind: Module,
    declarations: {
        "Component": Declaration {
            id: DeclarationId(
                0,
            ),
            kind: Function,
            scope: ScopeId(
                0,
            ),
        },
    },
    references: [],
    children: [
        Scope {
            id: ScopeId(
                1,
            ),
            kind: Function,
            declarations: {
                "foo": Declaration {
                    id: DeclarationId(
                        1,
                    ),
                    kind: Function,
                    scope: ScopeId(
                        1,
                    ),
                },
                "a": Declaration {
                    id: DeclarationId(
                        2,
                    ),
                    kind: Let,
                    scope: ScopeId(
                        1,
                    ),
                },
                "b": Declaration {
                    id: DeclarationId(
                        3,
                    ),
                    kind: Const,
                    scope: ScopeId(
                        1,
                    ),
                },
            },
            references: [],
            children: [
                Scope {
                    id: ScopeId(
                        2,
                    ),
                    kind: Function,
                    declarations: {},
                    references: [
                        Reference {
                            id: ReferenceId(
                                0,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                2,
                            ),
                            declaration (name): "a",
                            scope: ScopeId(
                                2,
                            ),
                        },
                        Reference {
                            id: ReferenceId(
                                1,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                3,
                            ),
                            declaration (name): "b",
                            scope: ScopeId(
                                2,
                            ),
                        },
                    ],
                    children: [],
                },
            ],
        },
    ],
}

