---
source: crates/forget_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAST:\\n{ast_output}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/forget_semantic_analysis/tests/fixtures/labels.js
---
Input:
function Component(props) {
  let y = 0;
  foo: for (let x = 0; x < 10; x++) {
    if (x == 7) {
      break foo;
    }
    y = x + y;
    continue foo;
  }
  bar: if (props) {
    break bar;
  }
}


AST:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Component",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "props",
          "typeAnnotation": null,
          "loc": null,
          "range": {
            "start": 0,
            "end": 1
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "NumericLiteral",
                  "value": 0,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "LabeledStatement",
            "label": {
              "type": "Identifier",
              "name": "foo",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "body": {
              "type": "ForStatement",
              "init": {
                "type": "VariableDeclaration",
                "kind": "let",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "x",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "init": {
                      "type": "NumericLiteral",
                      "value": 0,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  }
                ],
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "test": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "operator": "<",
                "right": {
                  "type": "NumericLiteral",
                  "value": 4621819117588971520,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "argument": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "prefix": false,
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "Identifier",
                        "name": "x",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "operator": "==",
                      "right": {
                        "type": "NumericLiteral",
                        "value": 4619567317775286272,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "BreakStatement",
                          "label": {
                            "type": "Identifier",
                            "name": "foo",
                            "typeAnnotation": null,
                            "loc": null,
                            "range": {
                              "start": 0,
                              "end": 1
                            }
                          },
                          "loc": null,
                          "range": {
                            "start": 0,
                            "end": 1
                          }
                        }
                      ],
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "alternate": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "y",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "x",
                          "typeAnnotation": null,
                          "loc": null,
                          "range": {
                            "start": 0,
                            "end": 1
                          }
                        },
                        "operator": "+",
                        "right": {
                          "type": "Identifier",
                          "name": "y",
                          "typeAnnotation": null,
                          "loc": null,
                          "range": {
                            "start": 0,
                            "end": 1
                          }
                        },
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "directive": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  {
                    "type": "ContinueStatement",
                    "label": {
                      "type": "Identifier",
                      "name": "foo",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  }
                ],
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "LabeledStatement",
            "label": {
              "type": "Identifier",
              "name": "bar",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "body": {
              "type": "IfStatement",
              "test": {
                "type": "Identifier",
                "name": "props",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "BreakStatement",
                    "label": {
                      "type": "Identifier",
                      "name": "bar",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  }
                ],
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "alternate": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      }
    }
  ],
  "sourceType": "module",
  "loc": null,
  "range": {
    "start": 0,
    "end": 1
  }
}

Analysis:
Scope {
    id: ScopeId(
        0,
    ),
    kind: Global,
    labels: {},
    declarations: {},
    references: [],
    children: [
        Scope {
            id: ScopeId(
                1,
            ),
            kind: Module,
            labels: {},
            declarations: {
                "Component": Declaration {
                    id: DeclarationId(
                        0,
                    ),
                    kind: FunctionDeclaration,
                    scope: ScopeId(
                        1,
                    ),
                },
            },
            references: [],
            children: [
                Scope {
                    id: ScopeId(
                        2,
                    ),
                    kind: Function,
                    labels: {
                        "foo": Label {
                            id: LabelId(
                                0,
                            ),
                            kind: Loop,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "bar": Label {
                            id: LabelId(
                                1,
                            ),
                            kind: Other,
                            scope: ScopeId(
                                2,
                            ),
                        },
                    },
                    declarations: {
                        "props": Declaration {
                            id: DeclarationId(
                                1,
                            ),
                            kind: FunctionDeclaration,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "y": Declaration {
                            id: DeclarationId(
                                2,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                    },
                    references: [
                        Reference {
                            id: ReferenceId(
                                6,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                1,
                            ),
                            declaration (name): "props",
                            scope: ScopeId(
                                2,
                            ),
                        },
                    ],
                    children: [
                        Scope {
                            id: ScopeId(
                                3,
                            ),
                            kind: For,
                            labels: {},
                            declarations: {
                                "x": Declaration {
                                    id: DeclarationId(
                                        3,
                                    ),
                                    kind: Let,
                                    scope: ScopeId(
                                        3,
                                    ),
                                },
                            },
                            references: [
                                Reference {
                                    id: ReferenceId(
                                        0,
                                    ),
                                    kind: Read,
                                    declaration: DeclarationId(
                                        3,
                                    ),
                                    declaration (name): "x",
                                    scope: ScopeId(
                                        3,
                                    ),
                                },
                                Reference {
                                    id: ReferenceId(
                                        1,
                                    ),
                                    kind: Read,
                                    declaration: DeclarationId(
                                        3,
                                    ),
                                    declaration (name): "x",
                                    scope: ScopeId(
                                        3,
                                    ),
                                },
                            ],
                            children: [
                                Scope {
                                    id: ScopeId(
                                        4,
                                    ),
                                    kind: Block,
                                    labels: {},
                                    declarations: {},
                                    references: [
                                        Reference {
                                            id: ReferenceId(
                                                2,
                                            ),
                                            kind: Read,
                                            declaration: DeclarationId(
                                                3,
                                            ),
                                            declaration (name): "x",
                                            scope: ScopeId(
                                                4,
                                            ),
                                        },
                                        Reference {
                                            id: ReferenceId(
                                                3,
                                            ),
                                            kind: ReadWrite,
                                            declaration: DeclarationId(
                                                2,
                                            ),
                                            declaration (name): "y",
                                            scope: ScopeId(
                                                4,
                                            ),
                                        },
                                        Reference {
                                            id: ReferenceId(
                                                4,
                                            ),
                                            kind: Read,
                                            declaration: DeclarationId(
                                                3,
                                            ),
                                            declaration (name): "x",
                                            scope: ScopeId(
                                                4,
                                            ),
                                        },
                                        Reference {
                                            id: ReferenceId(
                                                5,
                                            ),
                                            kind: Read,
                                            declaration: DeclarationId(
                                                2,
                                            ),
                                            declaration (name): "y",
                                            scope: ScopeId(
                                                4,
                                            ),
                                        },
                                    ],
                                    children: [
                                        Scope {
                                            id: ScopeId(
                                                5,
                                            ),
                                            kind: Block,
                                            labels: {},
                                            declarations: {},
                                            references: [],
                                            children: [],
                                        },
                                    ],
                                },
                            ],
                        },
                        Scope {
                            id: ScopeId(
                                6,
                            ),
                            kind: Block,
                            labels: {},
                            declarations: {},
                            references: [],
                            children: [],
                        },
                    ],
                },
            ],
        },
    ],
}

