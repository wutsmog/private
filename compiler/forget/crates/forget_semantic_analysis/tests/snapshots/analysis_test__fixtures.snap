---
source: crates/forget_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAST:\\n{ast_output}\\n\\nAnalysis:\\n{analysis_output}\")"
input_file: crates/forget_semantic_analysis/tests/fixtures/labels.js
---
Input:
function Component(props) {
  let y = 0;
  foo: for (let x = 0; x < 10; x++) {
    if (x == 7) {
      break foo;
    }
    y = x + y;
    continue foo;
  }
  bar: if (props) {
    break bar;
  }
}


AST:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Component",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "props",
          "typeAnnotation": null,
          "loc": null,
          "range": {
            "start": 0,
            "end": 1
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "NumericLiteral",
                  "value": 0,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "LabeledStatement",
            "label": {
              "type": "Identifier",
              "name": "foo",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "body": {
              "type": "ForStatement",
              "init": {
                "type": "VariableDeclaration",
                "kind": "let",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "x",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "init": {
                      "type": "NumericLiteral",
                      "value": 0,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  }
                ],
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "test": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "operator": "<",
                "right": {
                  "type": "NumericLiteral",
                  "value": 4621819117588971520,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "argument": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "prefix": false,
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "Identifier",
                        "name": "x",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "operator": "==",
                      "right": {
                        "type": "NumericLiteral",
                        "value": 4619567317775286272,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "BreakStatement",
                          "label": {
                            "type": "Identifier",
                            "name": "foo",
                            "typeAnnotation": null,
                            "loc": null,
                            "range": {
                              "start": 0,
                              "end": 1
                            }
                          },
                          "loc": null,
                          "range": {
                            "start": 0,
                            "end": 1
                          }
                        }
                      ],
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "alternate": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "y",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "x",
                          "typeAnnotation": null,
                          "loc": null,
                          "range": {
                            "start": 0,
                            "end": 1
                          }
                        },
                        "operator": "+",
                        "right": {
                          "type": "Identifier",
                          "name": "y",
                          "typeAnnotation": null,
                          "loc": null,
                          "range": {
                            "start": 0,
                            "end": 1
                          }
                        },
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "directive": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  {
                    "type": "ContinueStatement",
                    "label": {
                      "type": "Identifier",
                      "name": "foo",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  }
                ],
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "LabeledStatement",
            "label": {
              "type": "Identifier",
              "name": "bar",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "body": {
              "type": "IfStatement",
              "test": {
                "type": "Identifier",
                "name": "props",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "BreakStatement",
                    "label": {
                      "type": "Identifier",
                      "name": "bar",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  }
                ],
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "alternate": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      }
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": {
    "start": 0,
    "end": 1
  }
}

Analysis:
SemanticAnalysisDebug {
    root: ScopeId(
        0,
    ),
    scopes: [
        Scope {
            id: ScopeId(
                0,
            ),
            kind: Global,
            parent: None,
            labels: {},
            declarations: {},
            references: [],
            children: [
                ScopeId(
                    1,
                ),
            ],
        },
        Scope {
            id: ScopeId(
                1,
            ),
            kind: Function,
            parent: Some(
                ScopeId(
                    0,
                ),
            ),
            labels: {
                "foo": LabelId(
                    0,
                ),
                "bar": LabelId(
                    1,
                ),
            },
            declarations: {
                "props": DeclarationId(
                    0,
                ),
                "y": DeclarationId(
                    1,
                ),
                "x": DeclarationId(
                    2,
                ),
            },
            references: [
                ReferenceId(
                    0,
                ),
                ReferenceId(
                    1,
                ),
                ReferenceId(
                    6,
                ),
            ],
            children: [
                ScopeId(
                    2,
                ),
                ScopeId(
                    4,
                ),
            ],
        },
        Scope {
            id: ScopeId(
                2,
            ),
            kind: Block,
            parent: Some(
                ScopeId(
                    1,
                ),
            ),
            labels: {},
            declarations: {},
            references: [
                ReferenceId(
                    2,
                ),
                ReferenceId(
                    3,
                ),
                ReferenceId(
                    4,
                ),
                ReferenceId(
                    5,
                ),
            ],
            children: [
                ScopeId(
                    3,
                ),
            ],
        },
        Scope {
            id: ScopeId(
                3,
            ),
            kind: Block,
            parent: Some(
                ScopeId(
                    2,
                ),
            ),
            labels: {},
            declarations: {},
            references: [],
            children: [],
        },
        Scope {
            id: ScopeId(
                4,
            ),
            kind: Block,
            parent: Some(
                ScopeId(
                    1,
                ),
            ),
            labels: {},
            declarations: {},
            references: [],
            children: [],
        },
    ],
    labels: [
        Label {
            id: LabelId(
                0,
            ),
            kind: Loop,
            scope: ScopeId(
                1,
            ),
        },
        Label {
            id: LabelId(
                1,
            ),
            kind: Other,
            scope: ScopeId(
                1,
            ),
        },
    ],
    declarations: [
        Declaration {
            id: DeclarationId(
                0,
            ),
            kind: Let,
            scope: ScopeId(
                1,
            ),
        },
        Declaration {
            id: DeclarationId(
                1,
            ),
            kind: Let,
            scope: ScopeId(
                1,
            ),
        },
        Declaration {
            id: DeclarationId(
                2,
            ),
            kind: Let,
            scope: ScopeId(
                1,
            ),
        },
    ],
    references: [
        Reference {
            id: ReferenceId(
                0,
            ),
            kind: Read,
            declaration: DeclarationId(
                2,
            ),
            scope: ScopeId(
                1,
            ),
        },
        Reference {
            id: ReferenceId(
                1,
            ),
            kind: Read,
            declaration: DeclarationId(
                2,
            ),
            scope: ScopeId(
                1,
            ),
        },
        Reference {
            id: ReferenceId(
                2,
            ),
            kind: Read,
            declaration: DeclarationId(
                2,
            ),
            scope: ScopeId(
                2,
            ),
        },
        Reference {
            id: ReferenceId(
                3,
            ),
            kind: ReadWrite,
            declaration: DeclarationId(
                1,
            ),
            scope: ScopeId(
                2,
            ),
        },
        Reference {
            id: ReferenceId(
                4,
            ),
            kind: Read,
            declaration: DeclarationId(
                2,
            ),
            scope: ScopeId(
                2,
            ),
        },
        Reference {
            id: ReferenceId(
                5,
            ),
            kind: Read,
            declaration: DeclarationId(
                1,
            ),
            scope: ScopeId(
                2,
            ),
        },
        Reference {
            id: ReferenceId(
                6,
            ),
            kind: Read,
            declaration: DeclarationId(
                0,
            ),
            scope: ScopeId(
                1,
            ),
        },
    ],
}
