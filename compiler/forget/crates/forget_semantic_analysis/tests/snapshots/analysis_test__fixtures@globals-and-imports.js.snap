---
source: crates/forget_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/forget_semantic_analysis/tests/fixtures/globals-and-imports.js
---
Input:
import Foo from "foo";
import * as Bar from "bar";
import { Baz } from "baz";

function Component(props) {
  let g = global;
  let y = new Array(props.count);
  let s = String("hello");
  let b = Boolean(true);
  let n = Number(0);
  let x = Math.min(props.x, props.y);
  setTimeout(() => {}, 0);
  setInterval(() => {}, 0);
  Foo;
  Bar;
  Baz;
}


Analysis:
Scope {
    id: ScopeId(
        0,
    ),
    kind: Module,
    declarations: {
        "Foo": Declaration {
            id: DeclarationId(
                0,
            ),
            kind: Import,
            scope: ScopeId(
                0,
            ),
        },
        "Bar": Declaration {
            id: DeclarationId(
                1,
            ),
            kind: Import,
            scope: ScopeId(
                0,
            ),
        },
        "Baz": Declaration {
            id: DeclarationId(
                2,
            ),
            kind: Import,
            scope: ScopeId(
                0,
            ),
        },
        "Component": Declaration {
            id: DeclarationId(
                3,
            ),
            kind: FunctionDeclaration,
            scope: ScopeId(
                0,
            ),
        },
    },
    references: [],
    children: [
        Scope {
            id: ScopeId(
                1,
            ),
            kind: Function,
            declarations: {
                "props": Declaration {
                    id: DeclarationId(
                        4,
                    ),
                    kind: FunctionDeclaration,
                    scope: ScopeId(
                        1,
                    ),
                },
                "g": Declaration {
                    id: DeclarationId(
                        5,
                    ),
                    kind: Let,
                    scope: ScopeId(
                        1,
                    ),
                },
                "y": Declaration {
                    id: DeclarationId(
                        6,
                    ),
                    kind: Let,
                    scope: ScopeId(
                        1,
                    ),
                },
                "s": Declaration {
                    id: DeclarationId(
                        7,
                    ),
                    kind: Let,
                    scope: ScopeId(
                        1,
                    ),
                },
                "b": Declaration {
                    id: DeclarationId(
                        8,
                    ),
                    kind: Let,
                    scope: ScopeId(
                        1,
                    ),
                },
                "n": Declaration {
                    id: DeclarationId(
                        9,
                    ),
                    kind: Let,
                    scope: ScopeId(
                        1,
                    ),
                },
                "x": Declaration {
                    id: DeclarationId(
                        10,
                    ),
                    kind: Let,
                    scope: ScopeId(
                        1,
                    ),
                },
            },
            references: [
                Reference {
                    id: ReferenceId(
                        0,
                    ),
                    kind: Read,
                    declaration: DeclarationId(
                        4,
                    ),
                    declaration (name): "props",
                    scope: ScopeId(
                        1,
                    ),
                },
                Reference {
                    id: ReferenceId(
                        1,
                    ),
                    kind: Read,
                    declaration: DeclarationId(
                        4,
                    ),
                    declaration (name): "props",
                    scope: ScopeId(
                        1,
                    ),
                },
                Reference {
                    id: ReferenceId(
                        2,
                    ),
                    kind: Read,
                    declaration: DeclarationId(
                        4,
                    ),
                    declaration (name): "props",
                    scope: ScopeId(
                        1,
                    ),
                },
                Reference {
                    id: ReferenceId(
                        3,
                    ),
                    kind: Read,
                    declaration: DeclarationId(
                        0,
                    ),
                    declaration (name): "Foo",
                    scope: ScopeId(
                        1,
                    ),
                },
                Reference {
                    id: ReferenceId(
                        4,
                    ),
                    kind: Read,
                    declaration: DeclarationId(
                        1,
                    ),
                    declaration (name): "Bar",
                    scope: ScopeId(
                        1,
                    ),
                },
                Reference {
                    id: ReferenceId(
                        5,
                    ),
                    kind: Read,
                    declaration: DeclarationId(
                        2,
                    ),
                    declaration (name): "Baz",
                    scope: ScopeId(
                        1,
                    ),
                },
            ],
            children: [
                Scope {
                    id: ScopeId(
                        2,
                    ),
                    kind: Function,
                    declarations: {},
                    references: [],
                    children: [],
                },
                Scope {
                    id: ScopeId(
                        3,
                    ),
                    kind: Function,
                    declarations: {},
                    references: [],
                    children: [],
                },
            ],
        },
    ],
}
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    117,
                ),
                length: 6,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    139,
                ),
                length: 5,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    169,
                ),
                length: 6,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    196,
                ),
                length: 7,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    221,
                ),
                length: 6,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    242,
                ),
                length: 4,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    272,
                ),
                length: 10,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    299,
                ),
                length: 11,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)

