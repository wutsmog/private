---
source: crates/forget_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/forget_semantic_analysis/tests/fixtures/globals-and-imports.js
---
Input:
import Foo from "foo";
import * as Bar from "bar";
import { Baz } from "baz";

function Component(props) {
  let g = global;
  let y = new Array(props.count);
  let s = String("hello");
  let b = Boolean(true);
  let n = Number(0);
  let x = Math.min(props.x, props.y);
  setTimeout(() => {}, 0);
  setInterval(() => {}, 0);
  Foo;
  Bar;
  Baz;
}


Analysis:
Scope {
    id: ScopeId(
        0,
    ),
    kind: Global,
    declarations: {},
    references: [],
    children: [
        Scope {
            id: ScopeId(
                1,
            ),
            kind: Module,
            declarations: {
                "Component": Declaration {
                    id: DeclarationId(
                        0,
                    ),
                    kind: FunctionDeclaration,
                    scope: ScopeId(
                        1,
                    ),
                },
            },
            references: [],
            children: [
                Scope {
                    id: ScopeId(
                        2,
                    ),
                    kind: Function,
                    declarations: {
                        "props": Declaration {
                            id: DeclarationId(
                                1,
                            ),
                            kind: FunctionDeclaration,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "g": Declaration {
                            id: DeclarationId(
                                2,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "y": Declaration {
                            id: DeclarationId(
                                3,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "s": Declaration {
                            id: DeclarationId(
                                4,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "b": Declaration {
                            id: DeclarationId(
                                5,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "n": Declaration {
                            id: DeclarationId(
                                6,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "x": Declaration {
                            id: DeclarationId(
                                7,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                    },
                    references: [
                        Reference {
                            id: ReferenceId(
                                0,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                1,
                            ),
                            declaration (name): "props",
                            scope: ScopeId(
                                2,
                            ),
                        },
                        Reference {
                            id: ReferenceId(
                                1,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                1,
                            ),
                            declaration (name): "props",
                            scope: ScopeId(
                                2,
                            ),
                        },
                        Reference {
                            id: ReferenceId(
                                2,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                1,
                            ),
                            declaration (name): "props",
                            scope: ScopeId(
                                2,
                            ),
                        },
                    ],
                    children: [
                        Scope {
                            id: ScopeId(
                                3,
                            ),
                            kind: Function,
                            declarations: {},
                            references: [],
                            children: [],
                        },
                        Scope {
                            id: ScopeId(
                                4,
                            ),
                            kind: Function,
                            declarations: {},
                            references: [],
                            children: [],
                        },
                    ],
                },
            ],
        },
    ],
}
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    7,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    35,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    60,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    60,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    117,
                ),
                length: 6,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    139,
                ),
                length: 5,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    169,
                ),
                length: 6,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    196,
                ),
                length: 7,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    221,
                ),
                length: 6,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    242,
                ),
                length: 4,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    272,
                ),
                length: 10,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    299,
                ),
                length: 11,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    327,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    334,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    341,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)

