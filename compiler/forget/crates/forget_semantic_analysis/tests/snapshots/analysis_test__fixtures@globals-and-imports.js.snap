---
source: crates/forget_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAST:\\n{ast_output}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/forget_semantic_analysis/tests/fixtures/globals-and-imports.js
---
Input:
import Foo from "foo";
import * as Bar from "bar";
import { Baz } from "baz";

function Component(props) {
  let g = global;
  let y = new Array(props.count);
  let s = String("hello");
  let b = Boolean(true);
  let n = Number(0);
  let x = Math.min(props.x, props.y);
  setTimeout(() => {}, 0);
  setInterval(() => {}, 0);
  Foo;
  Bar;
  Baz;
}


AST:
{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Foo",
            "typeAnnotation": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          "loc": null,
          "range": {
            "start": 0,
            "end": 1
          }
        }
      ],
      "source": {
        "type": "StringLiteral",
        "value": "foo",
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportNamespaceSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Bar",
            "typeAnnotation": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          "loc": null,
          "range": {
            "start": 0,
            "end": 1
          }
        }
      ],
      "source": {
        "type": "StringLiteral",
        "value": "bar",
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "imported": {
            "type": "Identifier",
            "name": "Baz",
            "typeAnnotation": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          "local": {
            "type": "Identifier",
            "name": "Baz",
            "typeAnnotation": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          "loc": null,
          "range": {
            "start": 0,
            "end": 1
          }
        }
      ],
      "source": {
        "type": "StringLiteral",
        "value": "baz",
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      }
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Component",
        "typeAnnotation": null,
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "props",
          "typeAnnotation": null,
          "loc": null,
          "range": {
            "start": 0,
            "end": 1
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "g",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "Identifier",
                  "name": "global",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "NewExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Array",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  "arguments": [
                    {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "props",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "count",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "computed": false,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    }
                  ],
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "s",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "String",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  "arguments": [
                    {
                      "type": "StringLiteral",
                      "value": "hello",
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    }
                  ],
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "b",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Boolean",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  "arguments": [
                    {
                      "type": "BooleanLiteral",
                      "value": true,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    }
                  ],
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "n",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Number",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  "arguments": [
                    {
                      "type": "NumericLiteral",
                      "value": 0,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    }
                  ],
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Math",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "min",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    "computed": false,
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  "arguments": [
                    {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "props",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "x",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "computed": false,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    },
                    {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "props",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "y",
                        "typeAnnotation": null,
                        "loc": null,
                        "range": {
                          "start": 0,
                          "end": 1
                        }
                      },
                      "computed": false,
                      "loc": null,
                      "range": {
                        "start": 0,
                        "end": 1
                      }
                    }
                  ],
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              }
            ],
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "setTimeout",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "arguments": [
                {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [],
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  "generator": false,
                  "async": false,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  },
                  "expression": false,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                {
                  "type": "NumericLiteral",
                  "value": 0,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                }
              ],
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "setInterval",
                "typeAnnotation": null,
                "loc": null,
                "range": {
                  "start": 0,
                  "end": 1
                }
              },
              "arguments": [
                {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [],
                    "loc": null,
                    "range": {
                      "start": 0,
                      "end": 1
                    }
                  },
                  "generator": false,
                  "async": false,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  },
                  "expression": false,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                },
                {
                  "type": "NumericLiteral",
                  "value": 0,
                  "loc": null,
                  "range": {
                    "start": 0,
                    "end": 1
                  }
                }
              ],
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "Identifier",
              "name": "Foo",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "Identifier",
              "name": "Bar",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "Identifier",
              "name": "Baz",
              "typeAnnotation": null,
              "loc": null,
              "range": {
                "start": 0,
                "end": 1
              }
            },
            "directive": null,
            "loc": null,
            "range": {
              "start": 0,
              "end": 1
            }
          }
        ],
        "loc": null,
        "range": {
          "start": 0,
          "end": 1
        }
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      },
      "loc": null,
      "range": {
        "start": 0,
        "end": 1
      }
    }
  ],
  "sourceType": "module",
  "loc": null,
  "range": {
    "start": 0,
    "end": 1
  }
}

Analysis:
Scope {
    id: ScopeId(
        0,
    ),
    kind: Global,
    labels: {},
    declarations: {},
    references: [],
    children: [
        Scope {
            id: ScopeId(
                1,
            ),
            kind: Module,
            labels: {},
            declarations: {
                "Component": Declaration {
                    id: DeclarationId(
                        0,
                    ),
                    kind: FunctionDeclaration,
                    scope: ScopeId(
                        1,
                    ),
                },
            },
            references: [],
            children: [
                Scope {
                    id: ScopeId(
                        2,
                    ),
                    kind: Function,
                    labels: {},
                    declarations: {
                        "props": Declaration {
                            id: DeclarationId(
                                1,
                            ),
                            kind: FunctionDeclaration,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "g": Declaration {
                            id: DeclarationId(
                                2,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "y": Declaration {
                            id: DeclarationId(
                                3,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "s": Declaration {
                            id: DeclarationId(
                                4,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "b": Declaration {
                            id: DeclarationId(
                                5,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "n": Declaration {
                            id: DeclarationId(
                                6,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                        "x": Declaration {
                            id: DeclarationId(
                                7,
                            ),
                            kind: Let,
                            scope: ScopeId(
                                2,
                            ),
                        },
                    },
                    references: [
                        Reference {
                            id: ReferenceId(
                                0,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                1,
                            ),
                            declaration (name): "props",
                            scope: ScopeId(
                                2,
                            ),
                        },
                        Reference {
                            id: ReferenceId(
                                1,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                1,
                            ),
                            declaration (name): "props",
                            scope: ScopeId(
                                2,
                            ),
                        },
                        Reference {
                            id: ReferenceId(
                                2,
                            ),
                            kind: Read,
                            declaration: DeclarationId(
                                1,
                            ),
                            declaration (name): "props",
                            scope: ScopeId(
                                2,
                            ),
                        },
                    ],
                    children: [
                        Scope {
                            id: ScopeId(
                                3,
                            ),
                            kind: Function,
                            labels: {},
                            declarations: {},
                            references: [],
                            children: [],
                        },
                        Scope {
                            id: ScopeId(
                                4,
                            ),
                            kind: Function,
                            labels: {},
                            declarations: {},
                            references: [],
                            children: [],
                        },
                    ],
                },
            ],
        },
    ],
}
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Undefined variable",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    0,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)

